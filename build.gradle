/*
* Copyright (c) 2011 Haulmont Technology Ltd. All Rights Reserved.
* Haulmont Technology proprietary and confidential.
* Use is subject to license terms.
*/

allprojects {
    artifactGroup = 'com.haulmont.cuba'
    artifactVersion = '3.1.1'
    isSnapshot = true
    //tomcatDir = rootDir.absolutePath + '/../tomcat'
}

buildscript {
    repositories {
        mavenLocal()
        maven {
            credentials {
                username System.getenv('HAULMONT_REPOSITORY_USER')
                password System.getenv('HAULMONT_REPOSITORY_PASSWORD')
            }
            url "http://repository.haulmont.com:8587/nexus/content/groups/work"
        }
    }
    dependencies {
        classpath group: 'com.haulmont.gradle', name: 'cuba-plugin', version: '1.2-SNAPSHOT'
    }
}

apply(plugin: 'idea')
apply(plugin: 'cuba')

def sharedLibModule = project(':cuba-shared-lib')
def globalModule = project(':cuba-global')
def coreModule = project(':cuba-core')
def clientModule = project(':cuba-client')
def guiModule = project(':cuba-gui')
def webToolkitModule = project(':cuba-web-toolkit')
def webModule = project(':cuba-web')
def desktopModule = project(':cuba-desktop')
def uiTestModule = project(':cuba-test-ui')

def servletApi = [group: 'org.apache.tomcat', name: 'servlet-api', version: '6.0.20']
def vaadin = [group: 'com.haulmont.thirdparty', name: 'vaadin', version: '6.6.1.103']
def popupbutton = [group: 'com.haulmont.thirdparty', name: 'popupbutton', version: '1.0.0']
def gwtUser = [group: 'com.google.gwt', name: 'gwt-user', version: '2.3.0']
def gwtDev = [group: 'com.google.gwt', name: 'gwt-dev', version: '2.3.0']
def gwtServlets = [group: 'com.google.gwt', name: 'gwt-servlet', version: '2.3.0']
def validationApi = [group: 'javax.validation', name: 'validation-api', version: '1.0.0.GA']
def groovyArtifact = [group: 'org.codehaus.groovy', name: 'groovy', version: '1.7.10']
def asm = [group: 'asm', name: 'asm', version: '3.2']
def poi = [group: 'com.haulmont.thirdparty', name: 'poi', version: '3.7.20110830']
def postgres = [group: 'postgresql', name: 'postgresql', version: '8.3-603.jdbc4']
def hsqldb = [group: 'hsqldb', name: 'hsqldb', version: '1.8.0.10']

def baseVersion = artifactVersion + (isSnapshot ? '-SNAPSHOT' : '')

configure([sharedLibModule, globalModule, coreModule, clientModule, guiModule, webToolkitModule,
        webModule, desktopModule, uiTestModule]) {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'maven')
    apply(plugin: 'code-quality')
    apply(plugin: 'cuba')

    dependencies {
        compile(group: 'com.haulmont.bali', name: 'bali', version: baseVersion)
        compile(group: 'com.haulmont.chile', name: 'chile-core', version: baseVersion)
        compile(group: 'com.haulmont.chile', name: 'chile-jpa', version: baseVersion)

        compile(group: 'antlr', name: 'antlr', version: '2.7.7')
        compile(group: 'aopalliance', name: 'aopalliance', version: '1.0')
        compile(asm)
        compile(group: 'com.google.guava', name: 'guava', version: 'r07')
        compile(group: 'org.apache.openjpa', name: 'openjpa', version: '2.1.1')
        compile(group: 'commons-cli', name: 'commons-cli', version: '1.2')
        compile(group: 'commons-pool', name: 'commons-pool', version: '1.5.1')
        compile(group: 'net.sourceforge.serp', name: 'serp', version: '1.13.1')
        compile(group: 'org.antlr', name: 'antlr-runtime', version: '3.2')
        compile(group: 'org.freemarker', name: 'freemarker', version: '2.3.16')
        compile(group: 'org.perf4j', name: 'perf4j', version: '0.9.10')
        compile(group: 'org.springframework', name: 'spring-beans', version: '3.0.5.RELEASE')
        compile(group: 'org.springframework', name: 'spring-context', version: '3.0.5.RELEASE')
        compile(group: 'org.springframework', name: 'spring-web', version: '3.0.5.RELEASE')

        testCompile(group: 'com.haulmont.thirdparty', name: 'jmockit', version: '0.999.10')
        testCompile(group: 'junit', name: 'junit', version: '4.5')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    String checkstyleConfigDir = '../../config/checkstyle'
    checkstyleConfigFileName = "$checkstyleConfigDir/checkstyle.xml"
    checkstyleProperties.checkstyleConfigDir = checkstyleConfigFile.parentFile // Required for suppressions.xml linking
    checkstyleMain << {
        def checkstyleDir = "${project.buildDir}/checkstyle".toString()
        ant.xslt('in': "$checkstyleDir/main.xml", out: "$checkstyleDir/$project.name-checkstyle.html", style: "$checkstyleConfigDir/checkstyle.xsl")
    }
}

configure(sharedLibModule) {
    dependencies {
        jdbc(postgres)
        jdbc(hsqldb)
    }
}

configure(globalModule) {
    dependencies {
        // This dependency is required by CubaEnhancing task
        compile(group: 'com.haulmont.gradle', name: 'cuba-plugin', version: '1.2-SNAPSHOT')
    }

    task enhance(type: CubaEnhancing) {
        persistenceXml = "$globalModule.projectDir/src/cuba-persistence.xml"
        metadataXml = "$globalModule.projectDir/src/cuba-metadata.xml"
    }
    compileJava << {
        enhance.execute()

        Date releaseDate = new Date()
        String timeStamp = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(releaseDate)

        File releaseFile = new File("$buildDir/classes/main/com/haulmont/cuba/core/global/release.timestamp")
        releaseFile.delete()
        releaseFile.write(timeStamp)
    }
}

configure(coreModule) {
    dependencies {
        compile(globalModule)
        compile(sharedLibModule)
        compile(group: 'com.haulmont.thirdparty', name: 'ooo-bootstrapconnector', version: '3.0.0')
        compile(group: 'com.haulmont.thirdparty', name: 'xstream', version: '1.3.1.20100706')
        compile(group: 'com.haulmont.thirdparty', name: 'core-renderer', version: 'R8')
        runtime(group: 'xpp3', name: 'xpp3_min', version: '1.1.4c')
        compile(group: 'com.lowagie', name: 'itext', version: '2.1.0') {
            exclude(group: 'bouncycastle', module: 'bcmail-jdk14')
            exclude(group: 'bouncycastle', module: 'bcprov-jdk14')
        }
        compile(group: 'org.jgroups', name: 'jgroups', version: '2.12.1.Final')
        compile(group: 'org.apache.commons', name: 'commons-compress', version: '1.1')
        compile(poi)
        compile(group: 'org.aspectj', name: 'aspectjrt', version: '1.6.6')
        compile(group: 'org.aspectj', name: 'aspectjweaver', version: '1.6.6')
        compile(group: 'org.mybatis', name: 'mybatis', version: '3.0.5')
        compile(group: 'org.mybatis', name: 'mybatis-spring', version: '1.0.1')
        compile(group: 'org.json', name: 'json', version: '20090211')
        compile(group: 'org.openoffice', name: 'juh', version: '3.0.0')
        compile(group: 'org.openoffice', name: 'ridl', version: '3.0.0')
        compile(group: 'org.openoffice', name: 'unoil', version: '3.0.0')
        compile(group: 'org.springframework', name: 'spring-context-support', version: '3.0.5.RELEASE')
        compile(group: 'org.springframework', name: 'spring-orm', version: '3.0.5.RELEASE')
        compile(group: 'org.springframework', name: 'spring-tx', version: '3.0.5.RELEASE')
        compile(group: 'org.springframework', name: 'spring-webmvc', version: '3.0.5.RELEASE')

        provided(servletApi)

        jdbc(postgres)
        jdbc(hsqldb)

        testRuntime(servletApi)
        testRuntime(hsqldb)
    }

    test {
        scanForTestClasses = false
        includes = ['**/*Test.class']
    }

    task testsJar(dependsOn: testClasses, type: Jar) {
        from sourceSets.main.output.classesDir
        from sourceSets.test.output.classesDir
        from sourceSets.main.output.resourcesDir
        from sourceSets.test.output.resourcesDir
        classifier = 'tests'
    }

    assembleDbScripts << {
        copy {
            from new File(projectDir, 'db')
            into "$buildDir/db/10-cuba"
        }
    }

    artifacts {
        archives testsJar
    }

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = 'cuba-core'
        appJars('bali', 'chile-core', 'chile-jpa', 'cuba-global', 'cuba-core')
    }
}

configure(clientModule) {
    dependencies {
        compile(globalModule)
    }

    task testsJar(dependsOn: testClasses, type: Jar) {
        from sourceSets.main.output.classesDir
        from sourceSets.test.output.classesDir
        classifier = 'tests'
    }

    artifacts {
        archives testsJar
    }
}

configure(guiModule) {
    apply(plugin: 'groovy')

    sourceSets {
        main {
            groovy { srcDir 'src' }
        }
    }

    dependencies {
        compile(globalModule)
        compile(clientModule)
        compile(poi)
        compile(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.0.1')
        groovy(groovyArtifact)
        groovy(asm)

        testCompile(clientModule.sourceSets.test.output)
    }

    test {
        scanForTestClasses = false
        includes = ['**/*Test.class']
    }
}

configure(webToolkitModule) {
    dependencies {
        compile(vaadin)
        compile(popupbutton)

        provided(gwtUser)
        provided(gwtDev)
        provided(gwtServlets)
        provided(validationApi)
    }

    jar {
        manifest {
            attributes("Vaadin-Widgetsets": "com.haulmont.cuba.toolkit.gwt.WidgetSet")
        }
    }
}

configure(webModule) {
    configurations {
        gwtBuilding
    }

    dependencies {
        compile(sharedLibModule)
        compile(globalModule)
        compile(clientModule)
        compile(guiModule)
        compile(group: 'com.haulmont.thirdparty', name: 'jespa', version: '1.0.7')
        compile(group: 'commons-fileupload', name: 'commons-fileupload', version: '1.2.2')
        compile(group: 'org.jasig.cas', name: 'cas-client-core', version: '3.1.10')
        compile(group: 'org.springframework', name: 'spring-webmvc', version: '3.0.5.RELEASE')
        compile(vaadin)
        compile(popupbutton)

        runtime(group: 'com.haulmont.thirdparty', name: 'jcifs', version: '1.3.10')

        provided(webToolkitModule)
        provided(gwtUser)
        provided(gwtDev)
        provided(gwtServlets)
        provided(validationApi)
        provided(servletApi)

        gwtBuilding(validationApi + [classifier: 'sources'])
    }

    jar {
        manifest {
            attributes("Vaadin-Widgetsets": "com.haulmont.cuba.toolkit.gwt.WidgetSet")
        }
    }

    task buildThemes(dependsOn: compileJava, type: CubaWebThemeCreation) {
        themes = [
                [themeName: 'peyto', destFile: 'styles-include.css'],
                [themeName: 'havana', destFile: 'styles-include.css']
        ]
        cssDir = 'css/VAADIN/themes'
        destDir = "$buildDir/web/VAADIN/themes"
    }

    File webOutDir = new File("$buildDir/web")
    task buildGwt(dependsOn: buildThemes, type: CubaWebToolkit) {
        widgetSetsDir = "$webOutDir/VAADIN/widgetsets"
        widgetSetModules = [webToolkitModule]
        widgetSetClass = 'com.haulmont.cuba.toolkit.gwt.WidgetSet'
//        jvmArgs('-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000')
        //        compilerArgs = ['-style' : 'PRETTY', '-localWorkers' : '2']
    }
    assemble.dependsOn buildGwt

    task webArchive(dependsOn: buildGwt, type: Zip) {
        from file('web')
        from webOutDir
        exclude '**/web.xml', '**/app.properties'
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = 'cuba'
        appJars('bali', 'chile-core', 'chile-jpa', 'cuba-global', 'cuba-client', 'cuba-gui', 'cuba-web')
    }
    deploy << {
        delete {
            "$tomcatDir/webapps/cuba/VAADIN/widgetsets"
        }
        copy {
            from "$buildDir/web"
            into "$tomcatDir/webapps/cuba"
        }
    }
}

configure(desktopModule) {
    apply(plugin: 'application')
    mainClassName = 'com.haulmont.cuba.desktop.App'

    dependencies {
        compile(globalModule)
        compile(clientModule)
        compile(guiModule)
        compile(group: 'com.miglayout', name: 'miglayout-swing', version: '4.2')
        compile(group: 'com.haulmont.thirdparty', name: 'glazedlists', version: '1.9.20110801')
        compile(group: 'org.swinglabs', name: 'swingx-core', version: '1.6.2-2')

        assemble.dependsOn = [classes]
    }

    installApp {
        into("$buildDir/app/" + applicationName)
    }

    task desktopInstall(dependsOn: assemble) << {
        jar.execute()
        startScripts.execute()
        installApp.execute()
    }

    task desktopDist(dependsOn: assemble) << {
        distZip.execute()
    }

    task desktopStart(dependsOn: desktopInstall) << {
        run.execute()
    }
}

configure(uiTestModule) {
    dependencies {
    }
}

task restart(dependsOn: ['stop', ':cuba-core:deploy', ':cuba-web:deploy'], description: 'Redeploys applications and restarts local Tomcat') << {
    ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
        not {
            socket(server: 'localhost', port: '8787')
        }
    }
    start.execute()
}

/** *************************** Database related stuff  *****************************/

configurations {
    jdbc
}

dependencies {
    jdbc(hsqldb)
}

def dbName = 'cubadb'
def File dbDataDir = file('data')
def File dbSqlDir = file('modules/core/db/init/sql')
def dbClasspath = configurations.jdbc.fileCollection { true }.asPath

task startDb(description: 'Starts local HSQLDB server') << {
    dbDataDir.mkdirs()
    if ('linux'.equalsIgnoreCase(System.getProperty('os.name'))) {
        ant.exec(dir: dbDataDir.absolutePath, executable: '/bin/sh', spawn: true) {
            arg(line: "$projectDir/modules/core/db/run-hsqldb.sh $dbClasspath $dbName")
        }
    } else {
        ant.exec(dir: dbDataDir.absolutePath, executable: 'cmd.exe', spawn: true) {
            arg(line: "/c start $projectDir/modules/core/db/run-hsqldb.bat $dbClasspath $dbName")
        }
    }
    Thread.sleep(1000)
}

task stopDb(description: 'Stops local HSQLDB server') << {
    try {
        ant.sql(classpath: dbClasspath, delimiter: ";",
                driver: 'org.hsqldb.jdbcDriver',
                url: "jdbc:hsqldb:hsql://localhost/$dbName",
                userid: 'sa', password: '',
                autocommit: true,
                'shutdown'
        )
        Thread.sleep(1000)
    } catch (Exception e) {
        logger.warn(">>> error stopping local HSQLDB server: $e")
    }
}

task removeDb(description: 'Removes local HSQL database') << {
    delete {
        dbDataDir
    }
}

task createDb(description: 'Creates local HSQL database') << {
    ant.sql(classpath: dbClasspath, src: "$dbSqlDir/create-db.sql", delimiter: ";",
            driver: 'org.hsqldb.jdbcDriver',
            url: "jdbc:hsqldb:hsql://localhost/$dbName",
            userid: 'sa', password: '',
            autocommit: true
    )
}
