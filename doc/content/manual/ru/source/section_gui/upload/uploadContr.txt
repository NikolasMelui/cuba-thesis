public class UploadSample extends AbstractWindow {
    @Inject
    private FileUploadField uploadField;

    @Inject
    private Label fileName;

    @Inject
    private FileUploading fileUploading;//класс,реализующий управление файлами в хранилище

    private FileDescriptor fd;

    @Override
    public void init(Map<String, Object> params) {
        super.init(params);

        uploadField.addListener(new FileUploadField.ListenerAdapter() {
            @Override
            public void uploadStarted(Event event) {
                //код обработки начала загрузки
                uploadField.setEnabled(false);
            }

            @Override
            public void uploadFinished(Event event) {
                //код обработки окончания загрузки
                uploadField.setEnabled(true);
            }

            @Override
            public void uploadSucceeded(Event event) {
                //код обработки успешной загрузки
                fd = uploadField.getFileDescriptor();

                try {
                    //запись файла в хранилище файлов
                    fileUploading.putFileIntoStorage(uploadField.getFileId(), fd);
                } catch (FileStorageException e) {
                    throw new RuntimeException(e);
                }
                showNotification("File " + uploadField.getFileName() + " was successfully uploaded",
                        NotificationType.HUMANIZED);
                fileName.setValue(uploadField.getFileName());
            }

            @Override
            public void uploadFailed(Event event) {
                //код обработки ошибок загрузки
                showNotification("Upload was unsuccessfull", NotificationType.HUMANIZED);
            }
        });
    }
}