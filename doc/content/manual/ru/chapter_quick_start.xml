<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<!-- This document was created with Syntext Serna Free. --><chapter id="chapter_quickStart" lang="ru">
  <title>Быстрый старт</title>
  <para>В качестве первого знакомства с платформой <trademark>CUBA</trademark> мы создадим простое приложение для управления информацией о покупателях и заказах. Задача − демонстрация основных шагов по созданию модели данных и пользовательского интерфейса, а также по развертыванию приложения на сервере.</para>
  <para>На Вашей рабочей машине уже должно быть установлено и настроено необходимое программное обеспечение, см.   <xref xrefstyle="" linkend="chapter_setup"/>.</para>
  <para>Основные задачи, стоящие при разработке нашего приложения:</para>
  <orderedlist>
    <listitem>
      <para>Разработка модели данных, которая заключается в создании <glossterm linkend="entity">сущностей</glossterm> предметной области и соответствующих таблиц базы данных.</para>
    </listitem>
    <listitem>
      <para>Разработка экранов пользовательского интерфейса, позволяющих создавать, просматривать, обновлять и удалять сущности модели данных.</para>
    </listitem>
  </orderedlist>
  <section id="quick_start">
    <title>Описание задачи</title>
    <para>Приложение предназначено для ведения сведений о покупателях и их заказах. </para>
    <para>Покупатель имеет следующие характеристики:</para>
    <itemizedlist>
      <listitem>
        <para>Имя</para>
      </listitem>
      <listitem>
        <para>Электронная почта</para>
      </listitem>
    </itemizedlist>
    <para>Характеристики заказа:</para>
    <itemizedlist>
      <listitem>
        <para>Принадлежность покупателю</para>
      </listitem>
      <listitem>
        <para>Дата</para>
      </listitem>
      <listitem>
        <para>Сумма</para>
      </listitem>
    </itemizedlist>
    <para>Пользовательский интерфейс приложения должен содержать:</para>
    <itemizedlist>
      <listitem>
        <para>Окно списка покупателей;</para>
      </listitem>
      <listitem>
        <para>Окно редактирования сведений о покупателе, содержащее также список заказов данного покупателя;</para>
      </listitem>
      <listitem>
        <para>Окно общего списка заказов;</para>
      </listitem>
      <listitem>
        <para>Окно редактирования заказа.</para>
      </listitem>
    </itemizedlist>
    <para>Приложение должно поддерживать русский и английский язык интерфейса.</para>
  </section>
  <section>
    <title>Создание приложения в CUBA Studio</title>
    <para>TODO</para>
  </section>
  <section>
    <title>Создание приложения вручную</title>
    <section>
      <title>Настройка проекта приложения</title>
      <orderedlist>
        <listitem>
          <para>Создайте рабочую папку для проекта, например, <filename>c:/work/sales</filename>.</para>
          <warning>
            <para>Путь не должен содержать пробелов!</para>
          </warning>
        </listitem>
        <listitem>
          <para>Загрузите архив с шаблоном проекта <ulink url="http://docs.haulmont.com/cuba/4.0/samples/sales.zip">http://docs.haulmont.com/cuba/4.0/samples/sales.zip</ulink> и распакуйте содержимое архива в рабочий каталог таким образом, чтобы в каталоге <filename>c:/work/sales</filename> появился подкаталог <filename>modules</filename> и файлы <filename>build.gradle</filename> и <filename>settings.gradle</filename></para>
        </listitem>
        <listitem>
          <para>Запустите командную строку в рабочем каталоге <filename>c:/work/sales</filename>.</para>
        </listitem>
        <listitem>
          <para>Собираем проект. В командной строке введите команду</para>
          <prompt>gradle assemble</prompt>
          <para>На этом этапе будут загружены все необходимые библиотеки и в каталогах модулей в подкаталогах <filename>build</filename> будут собраны артефакты проекта. </para>
        </listitem>
        <listitem>
          <para>Чтобы работать с проектом в <application>IntelliJ IDEA</application>, запускаем команду, с помощью которой создаются проектные файлы <filename>*.ipr</filename>, <filename>*.iml</filename></para>
          <prompt>gradle idea</prompt>
        </listitem>
        <listitem>
          <para>Устанавливаем сервер приложений <application>Apache Tomcat</application>:</para>
          <prompt>gradle setupTomcat</prompt>
          <para>Сервер <application>Tomcat</application> будет установлен в подкаталоге <filename>build</filename> рабочего каталога. Расположение сервера определяется переменной <varname>ext.tomcatDir</varname> скрипта сборки <filename>build.gradle</filename>. </para>
        </listitem>
        <listitem>
          <para>Разворачиваем собранные артефакты и библиотеки проекта в <application>Tomcat</application>:</para>
          <prompt>gradle deploy</prompt>
          <para/>
        </listitem>
        <listitem>
          <para>Создаем базу данных на локальном сервере PostgreSQL:</para>
          <prompt>gradle createDb</prompt>
          <para>Имя базы данных определяется параметром <varname>dbName</varname> задачи <varname>createDb</varname> скрипта <filename>build.gradle</filename>, в нашем случае <database>
              <database>
                <database>sales</database>
              </database>
            </database>.</para>
        </listitem>
        <listitem>
          <para>Запускаем сервер:</para>
          <prompt>gradle start</prompt>
        </listitem>
        <listitem>
          <para>Для просмотра приложения в веб-браузере введите в адресную строку <ulink url="http://localhost:8080/app">http://localhost:8080/app</ulink></para>
          <para>Логин и пароль пользователя − admin / admin.</para>
          <para>Запущенное приложение содержит два главных пункта меню (<guimenu>Администрирование</guimenu> и <guimenu>Помощь</guimenu>), функциональность подсистемы безопасности и администрирования системы.</para>
          <figure>
            <title>Главное окно приложения</title>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="img/quick_start_app1.png"/>
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>
        <listitem>
          <para>Откройте проектный файл <filename>sales.ipr</filename> в IntelliJ IDEA. Вы увидите структуру проекта, аналогичную описанной в <xref linkend="project_file_structure"/></para>
        </listitem>
      </orderedlist>
    </section>
    <section>
      <title>Создание таблиц базы данных</title>
      <para>Откройте файл <filename>db/init/postgres/create-db.sql</filename> модуля <structname>core</structname> и добавьте в него следующий код для создания таблиц <code>Покупатель</code> и <code>Заказ</code>:</para>
      <programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="source/qs/create-db.sql" parse="text" encoding="UTF-8"/></programlisting>
      <para>SQL-команды разделяются знаком «^», это дает возможность задания сложных команд, содержащих внутри себя знаки «;». Системные поля являются обязательными.</para>
      <para>Остановите сервер приложения командой</para>
      <para> <prompt>gradle stop</prompt></para>
      <para>Затем пересоздайте локальную базу данных <database>
          <database>sales</database>
        </database> командой </para>
      <para><prompt>gradle createDb</prompt></para>
      <para>При этом старая база данных с данным именем удаляется, создается новая, и на ней выполняется скрипт <filename>create-db.sql</filename>.</para>
    </section>
    <section>
      <title>Создание сущностей</title>
      <para>Создайте пакет <code>com.sample.sales.entity</code> в модуле <structname>global</structname>.</para>
      <para>В данном пакете создайте класс <glossterm linkend="entity">сущности</glossterm> <code>Покупатель (Customer)</code>,  представленный в листинге:</para>
      <programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="source/qs/Customer.java" parse="text" encoding="UTF-8"/></programlisting>
      <tip>
        <title>Совет</title>
        <para>Для автоматической генерации <firstterm>методов доступа</firstterm> (get/set) в <application>IntelliJ IDEA</application> можно воспользоваться сочетанием клавиш <keycombo>
            <keycap>Alt</keycap>
            <keycap>Ins</keycap>
          </keycombo>, затем в меню выбрать <guimenu>Getter and Setter</guimenu>. В отобразившемся окне выберите требуемые поля и нажмите на кнопку <guibutton>ОК</guibutton>.</para>
      </tip>
      <para>Класс <code>Customer</code> унаследован от <code>StandardEntity</code>, обеспечивающего стандартную функциональность сущностей: первичный ключ, <glossterm linkend="optimistic_locking">оптимистичное блокирование</glossterm>, аудит создания и изменения экземпляра, поддержку <link linkend="soft_deletion">мягкого удаления</link>.</para>
      <para>Рассмотрим аннотации, использованные в классе сущности: <itemizedlist>
          <listitem>
            <para><code>@javax.persistence.Entity</code> − объявляет класс сущностью модели данных с именем <literal>sales$Customer</literal> (параметр <literal>name</literal>). Имя сущности обязательно должно начинаться с префикса, отделенного знаком <literal>$</literal>. Желательно использовать в качестве префикса короткое имя проекта для формирования отдельного пространства имен.</para>
          </listitem>
          <listitem>
            <para><code>@javax.persistence.Table</code> − связывает сущность с таблицей <database>
                <database>SALES_CUSTOMER</database>
              </database> базы данных </para>
          </listitem>
          <listitem>
            <para><code>@com.haulmont.chile.core.annotations.NamePattern</code> − задает способ формирования имени экземпляра сущности. В данном случае именем экземпляра будет содержимое атрибута <literal>name</literal>. Имя экземпляра обычно требуется для отображения ссылочных атрибутов в пользовательском интерфейсе. </para>
          </listitem>
          <listitem>
            <para><code>@javax.persistence.Column</code> − связывает атрибут сущности с колонкой таблицы. Параметр <code>nullable = false</code> делает атрибут сущности обязательным к заполнению. Параметр <code>length</code> задает максимальную длину текстового атрибута, по умолчанию <literal>255</literal>.</para>
          </listitem>
        </itemizedlist></para>
      <para id="text_registration_entity">После создания класса зарегистрируйте его в файле <filename>sales-persistence.xml</filename> модуля <structname>global</structname> в элементе <sgmltag>persistence-unit</sgmltag>:<programlisting>&lt;class&gt;com.sample.sales.entity.Customer&lt;/class&gt;</programlisting></para>
      <para>Для <link linkend="localization">локализации</link> имен сущностей и атрибутов создайте файлы <filename>messages.properties</filename> и <filename>messages_ru.properties</filename> в том же пакете, что и классы.</para>
      <para>В этих файлах определяются строки с ключом <literal>класс_сущности</literal> для названия сущности и <literal>класс_сущности.атрибут</literal> для названий атрибутов. Эти названия будут использованы при отображении списка экземпляров  и в окне редактирования сущности.</para>
      <caution>
        <title>Подсказка</title>
        <para>Все исходные файлы, в том числе <filename>*.properties</filename>, должны иметь кодировку <literal>UTF-8</literal>, поэтому в начале работы необходимо настроить кодировку <literal>UTF-8</literal> в среде <application>IntelliJ IDEA</application>. Для этого зайдите в <guimenu>File−&gt;Settings−&gt;Project Settings−&gt;File Encodings</guimenu>. В выпадающем списке <guilabel>Default encoding for properties files</guilabel> выберите <literal>UTF-8</literal>. Если не установлен флажок <guilabel>Autodetect UTF-encoded files</guilabel>, то установите его.</para>
      </caution>
      <para>Итак, создайте локализованные названия для сущности <code>Покупатель</code>:</para>
      <para>    <filename>messages.properties</filename><programlisting>Customer=Customer
Customer.name=Name
Customer.email=Email</programlisting></para>
      <para>    <filename>messages_ru.properties</filename><programlisting>Customer=Покупатель
Customer.name=Имя
Customer.email=Email</programlisting></para>
      <para>Далее создайте в том же пакете <code>com.sample.sales.entity</code> сущность <code>Заказ (Order)</code>. Класс сущности представлен в листинге ниже:</para>
      <programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="source/qs/Order.java" parse="text" encoding="UTF-8"/></programlisting>
      <para>Рассмотрим <link linkend="entity_annotations">аннотации</link>, использованные в классе сущности: <itemizedlist>
          <listitem>
            <para><code>@javax.persistence.ManyToOne</code> − определяет атрибут ссылочного типа с отношением <literal>many-to-one</literal>, т.е. в нашем случае несколько заказов для одного покупателя. Параметр <code>fetch = FetchType.LAZY</code> означает, что загрузка сущности <code>Customer</code> не обязательно будет производиться одновременно с сущностью <code>Order</code>.</para>
          </listitem>
          <listitem>
            <para><code>@javax.persistence.JoinColumn</code> −  определяет, каким образом сущности связаны на <link linkend="app_tiers">уровне</link>  базы данных. Параметр <code>name</code> определяет поле таблицы <database>SALES_ORDER</database>, которое ссылается на первичный ключ таблицы <database>SALES_CUSTOMER</database>.</para>
          </listitem>
          <listitem>
            <para><code>@javax.persistence.Temporal</code> − для атрибута типа дата/время определяет возможное содержимое: дата+время, только дата, только время.</para>
          </listitem>
        </itemizedlist></para>
      <para>Создайте локализованные названия для сущности <code>Заказ</code>:</para>
      <para>    <filename>messages.properties</filename><programlisting>Order=Order
Order.customer=Customer
Order.date=Date
Order.amount=Amount</programlisting></para>
      <para>    <filename>messages_ru.properties</filename><programlisting>Order=Заказ
Order.customer=Покупатель
Order.date=Дата
Order.amount=Сумма</programlisting></para>
      <para>Зарегистрируйте сущность Заказ в файле <filename>sales-persistence.xml</filename> модуля <structname>global</structname>: <programlisting>&lt;class&gt;com.sample.sales.entity.Order&lt;/class&gt;</programlisting></para>
    </section>
    <section>
      <title>Создание пользовательского интерфейса приложения</title>
      <para>Для ограничения списка поддерживаемых языков интерфейса откройте файл <filename>sales-web-app.properties</filename> модуля <structname>web</structname> и добавьте в него следующее значение:<programlisting>cuba.availableLocales=English|en;Russian|ru</programlisting></para>
      <para>Файлы, относящиеся к экранам, будем создавать в пакете <code>com.sample.sales.gui</code> модуля gui.</para>
      <para>Любой экран  определяется <glossterm linkend="screen_xml_glossentry">XML-дескриптором</glossterm>, описывающим  <link linkend="datasources">источники данных</link> и расположение <link linkend="gui_framework">визуальных компонентов</link> экрана. У экрана также может быть <glossterm linkend="screen_controller_glossentry">контроллер</glossterm> − Java-класс, содержащий логику инициализации и обработки событий экрана.</para>
      <section id="qs_customer_browse">
        <title>Экран списка Покупателей</title>
        <para>В данном экране будет отображаться список покупателей в виде таблицы, фильтр и панель с кнопками, обеспечивающими основные операции с записями (создание, редактирование, удаление).</para>
        <para>Создайте пакет <code>com.sample.sales.gui.customer</code> в модуле <structname>gui</structname>, где будут находиться файлы, относящиеся к пользовательскому интерфейсу  сущности <code>Покупатель</code>. Создайте  <glossterm linkend="screen_xml_glossentry">XML-дескриптор</glossterm> экрана списка покупателей <filename>customer-browse.xml</filename>: </para>
        <programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="source/qs/customer-browse.xml" parse="text" encoding="UTF-8"/></programlisting>
        <para>Рассмотрим элементы дескриптора более подробно.</para>
        <para>Атрибут <sgmltag>caption</sgmltag> корневого элемента  задает заголовок экрана. В нашем случае он содержит значение, начинающееся с префикса <code>msg://</code>, что означает ключ в <link linkend="message_packs">пакете локализованных сообщений</link>. Пакет задан атрибутом <sgmltag>messagesPack</sgmltag> этого же элемента. Таким образом, чтобы задать заголовок экрана на английском и русском языках, нужно создать файлы <filename>messages.properties</filename> и <filename>messages_ru.properties</filename>  в указанном пакете, и добавить в них соответствующие пары ключ-значение: </para>
        <para><filename>messages.properties</filename> <programlisting>browserCaption=Customers</programlisting></para>
        <para><filename>messages_ru.properties</filename> <programlisting>browserCaption=Покупатели</programlisting></para>
        <para>В элементе <sgmltag>dsContext</sgmltag> добавлен один  <link linkend="datasources">источник данных</link> <sgmltag>collectionDatasource</sgmltag>, который выбирает сущности <code>Покупатель</code> с помощью <glossterm linkend="jpql">JPQL</glossterm> запроса <programlisting>select c from sales$Customer c order by c.name</programlisting> с <link linkend="views">представлением</link> <code>view=&quot;_local&quot;</code>.</para>
        <para>Содержимое элемента <sgmltag>layout</sgmltag> определяет визуальную компоновку экрана. Вложенные компоненты отображаются вертикально сверху вниз.</para>
        <para>Компонент Generic Filter (элемент <sgmltag>filter</sgmltag>) служит для отображения  фильтра данных, настраиваемого пользователем.</para>
        <para>Компонент Table (элемент  <sgmltag>table</sgmltag>) служит для отображения данных в виде таблицы.</para>
        <para>Элемент <sgmltag>column</sgmltag> задает параметры отображения одной колонки таблицы. Обязательно содержит атрибут <sgmltag>id</sgmltag>, который определяет, данные какого атрибута сущности выводятся в данной колонке. Заголовком колонки по умолчанию будет название атрибута сущности, заданное в пакете <link linkend="message_packs">локализованных сообщений</link>.</para>
        <para>Элемент <sgmltag>rowsCount</sgmltag> позволяет организовать постраничный вывод данных таблицы и отобразить общее количество строк.</para>
        <para>Элемент <sgmltag>actions</sgmltag> задает набор контекстных действий с таблицей. В нашем случае все указанные действия являются стандартными (что определяется именем действия в атрибуте <sgmltag>id</sgmltag> элемента <sgmltag>action</sgmltag>), и не требуют дополнительного кодирования. Задание некоторого действия для таблицы приводит к появлению соответствующего пункта контекстного меню таблицы.</para>
        <para>Над таблицей находится панель (элемент <sgmltag>buttonsPanel</sgmltag>), содержащая кнопки для управления данными в этой таблице. Кнопки связаны с действиями (<sgmltag>actions</sgmltag>) таблицы, и в данном случае дублируют пункты контекстного меню.</para>
        <para><glossterm linkend="screen_xml_glossentry">XML-дескриптор</glossterm> экрана должен иметь идентификатор, по которому его можно вызвать  из меню или из программного кода. Идентификатор в нашем случае назначается в файле <filename>sales-screens.xml</filename> модуля <structname>gui</structname> <programlisting>&lt;screen id=&quot;sales$Customer.lookup&quot; template=&quot;/com/haulmont/sales/gui/customer/customer-browse.xml&quot;/&gt;</programlisting></para>
        <para>Идентификатор <literal> sales$Customer.lookup</literal> удовлетворяет соглашению, по которому экраны списков сущностей должны иметь вид <literal>{entity_name}.lookup</literal>. Данное соглашение облегчает настройку визуальных компонентов, работающих со ссылочными атрибутами сущностей.</para>
        <para>Чтобы вызывать экран из главного меню приложения, добавьте в файл <filename>sales-web-menu.xml</filename> модуля <structname>web</structname> следующий элемент:<programlisting>&lt;menu id=&quot;sales&quot; insertBefore=&quot;administration&quot;&gt;
    &lt;item id=&quot;sales$Customer.lookup&quot;/&gt;
&lt;/menu&gt;</programlisting></para>
        <para>Для того, чтобы пункт меню содержал локализованное имя экрана, добавьте в <link linkend="main_message_pack">главный пакет сообщений</link> модуля web (файлы     <filename>messages.properties</filename> и <filename>messages_ru.properties</filename> пакета <code>com.sample.sales.web</code> следующие строки:</para>
        <para>    <filename>messages.properties</filename></para>
        <programlisting>menu-config.sales=Sales
menu-config.sales$Customer.lookup=Customers</programlisting>
        <para>    <filename>messages_ru.properties</filename></para>
        <programlisting>menu-config.sales=Продажи
menu-config.sales$Customer.lookup=Покупатели</programlisting>
        <para>Посмотрим, как созданный нами экран выглядит в работающем приложении. Для этого пересоберите проект </para>
        <para><prompt>gradle restart</prompt></para>
        <para>и зайдите в систему, выбрав Русский язык в окне логина. Откройте пункт меню <guimenu>Продажи</guimenu> −&gt; <guimenu>Покупатели</guimenu>.</para>
        <figure>
          <title>Экран списка покупателей</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/qs_customer_browse.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section>
        <title>Экран редактирования Покупателя</title>
        <para>На данном этапе рассмотрим создание экрана просмотра и редактирования <code>Покупателя</code> в простейшем варианте −  без списка  <code>Заказов</code>.</para>
        <para>Создайте в пакете <code>com.sample.sales.gui.customer</code> файл <filename>customer-edit.xml</filename> следующего содержания: <programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="source/qs/customer-edit-1.xml" parse="text" encoding="UTF-8"/></programlisting></para>
        <para>Здесь в корневом элементе указан атрибут <sgmltag>class</sgmltag>, определяющий класс контроллера экрана. В данном случае необходима только базовая логика работы с редактируемой сущностью, поэтому используется стандартный <code>AbstractEditor</code>.</para>
        <para>Атрибут <sgmltag>datasource</sgmltag> корневого элемента определяет имя <link linkend="datasources">источника данных</link>, в который будет передан экземпляр редактируемой сущности из вызывающего экран кода.</para>
        <para>Атрибут <sgmltag>focusComponent</sgmltag> задает имя компонента, которому будет передан фокус ввода при открытии экрана.</para>
        <para>Атрибут <sgmltag>caption</sgmltag> корневого элемента  задает заголовок экрана. Добавим в существующие файлы <filename>messages.properties</filename> и <filename>messages_ru.properties</filename>  пакета <code>com.sample.sales.gui.customer</code> пары ключ-значение:  </para>
        <para><filename>messages.properties</filename> <programlisting>editorCaption=Customer</programlisting><filename>messages_ru.properties</filename> <programlisting>editorCaption=Покупатель</programlisting></para>
        <para>В элементе <sgmltag>dsContext</sgmltag> добавлен один  <link linkend="datasources">источник данных</link> <sgmltag>datasource</sgmltag>, в который будет передан экземпляр редактируемой сущности из вызывающего экран кода. </para>
        <para>Элемент <sgmltag>layout</sgmltag>  в данном случае содержит два вложенных элемента: <itemizedlist>
            <listitem>
              <para><sgmltag>fieldGroup</sgmltag> − группа полей, связанная с источником данных, предназначенная для отображения и редактирования значений атрибутов сущности</para>
            </listitem>
            <listitem>
              <para><sgmltag>iframe</sgmltag> −  фрейм типа <literal>editWindowActions</literal> (атрибут <sgmltag>screen</sgmltag>) с кнопками стандартных действий редактора −  <guibutton>OK</guibutton>, <guibutton>Cancel</guibutton></para>
            </listitem>
          </itemizedlist></para>
        <para>Атрибуты <sgmltag>id</sgmltag> элементов <sgmltag>field</sgmltag> группы полей соответствуют именам редактируемых атрибутов сущности.</para>
        <para>Атрибут <sgmltag>expand</sgmltag> элемента <sgmltag>layout</sgmltag> нужен для того, чтобы растянуть фрейм на все свободное пространство по вертикали, тогда кнопки окажутся прижатыми вверх к группе полей.</para>
        <para>Зададим идентификатор экрана в файле <filename>sales-screens.xml</filename> модуля <structname>gui</structname> <programlisting>&lt;screen id=&quot;sales$Customer.edit&quot; template=&quot;/com/haulmont/sales/gui/customer/customer-edit.xml&quot;/&gt;</programlisting></para>
        <para>Для правильной работы стандартных действий <literal>create</literal> и <literal>edit</literal> таблицы в экране списка необходимо, чтобы идентификатор экрана редактирования соответствовал виду <literal>{entity_name}.edit</literal></para>
        <para>Попробуем добавить и отредактировать <code>Покупателя</code>  в работающем приложении. Для этого пересоберите проект </para>
        <para><prompt>gradle restart</prompt></para>
        <para>и зайдите в систему, выбрав Русский язык в окне логина. Откройте пункт меню <guimenu>Продажи</guimenu> −&gt; <guimenu>Покупатели</guimenu> и нажмите кнопку <guibutton>Создать</guibutton>.</para>
        <figure>
          <title>Окно редактирования покупателя</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/qs_customer_edit_1.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section>
        <title>Экран списка Заказов</title>
        <para>Создайте пакет <code>com.sample.sales.gui.order</code> и в нем файл <filename>order-browse.xml</filename> следующего содержания:<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="source/qs/order-browse.xml" parse="text" encoding="UTF-8"/></programlisting></para>
        <para>Данный экран аналогичен описанному в <xref linkend="qs_customer_browse"/> и имеет следующую особенность: так как среди прочих отображается ссылочный атрибут <code>Order.customer</code>, требуется определить представление сущности <code>Order</code>, включающее этот атрибут (стандартные представления <literal>_local</literal> и <literal>_minimal</literal> не включают ссылочных атрибутов).</para>
        <para>Определите представление <literal>orderWithCustomer</literal> в файле <filename>sales-views.xml</filename> модуля <structname>core</structname>: <programlisting>&lt;view class=&quot;com.sample.sales.entity.Order&quot;
      name=&quot;orderWithCustomer&quot;
      extends=&quot;_local&quot;&gt;
    &lt;property name=&quot;customer&quot; view=&quot;_minimal&quot;/&gt;
&lt;/view&gt;</programlisting></para>
        <para>Создайте файлы <filename>messages.properties</filename> и <filename>messages_ru.properties</filename>  в пакете <code>com.sample.sales.gui.order</code>, и внесите в них локализацию заголовка экрана: </para>
        <para><filename>messages.properties</filename> <programlisting>browserCaption=Orders</programlisting></para>
        <para><filename>messages_ru.properties</filename> <programlisting>browserCaption=Заказы</programlisting></para>
        <para>Далее зарегистрируйте экран в файле <filename>sales-screens.xml</filename> модуля <structname>gui</structname>: <programlisting>&lt;screen id=&quot;sales$Order.lookup&quot; template=&quot;/com/haulmont/sales/gui/order/order-browse.xml&quot;/&gt;</programlisting></para>
        <para>и добавьте соответствующий пункт меню в файл <filename>sales-web-menu.xml</filename> модуля <structname>web</structname>: <programlisting>&lt;item id=&quot;sales$Order.lookup&quot;/&gt;</programlisting></para>
        <para>Локализованные названия нового пункта меню  добавьте в <link linkend="main_message_pack">главный пакет сообщений</link> модуля web (файлы     <filename>messages.properties</filename> и <filename>messages_ru.properties</filename> пакета <code>com.sample.sales.web</code>):</para>
        <para>    <filename>messages.properties</filename></para>
        <programlisting>menu-config.sales$Order.lookup=Orders</programlisting>
        <para>    <filename>messages_ru.properties</filename></para>
        <programlisting>menu-config.sales$Order.lookup=Заказы</programlisting>
        <para>Пересоберите проект </para>
        <para><prompt>gradle restart</prompt></para>
        <para>и зайдите в систему, выбрав Русский язык в окне логина. Откройте пункт меню <guimenu>Продажи</guimenu> −&gt; <guimenu>Заказы</guimenu>.</para>
        <figure>
          <title>Окно списка Заказов</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/qs_order_browse.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section>
        <title>Экран редактирования Заказа</title>
        <para>Создайте в пакете <code>com.sample.sales.gui.order</code>  файл <filename>order-edit.xml</filename> следующего содержания: <programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="source/qs/order-edit.xml" parse="text" encoding="UTF-8"/></programlisting></para>
        <para>Данный экран также использует ранее объявленное представление <literal>orderWithCustomer</literal> для отображения заказа совместно с покупателем.</para>
        <para>Добавьте в файлы <filename>messages.properties</filename> и <filename>messages_ru.properties</filename> пакета <code>com.sample.sales.gui.order</code>  локализацию заголовка экрана редактирования: </para>
        <para><filename>messages.properties</filename> <programlisting>editorCaption=Order</programlisting></para>
        <para><filename>messages_ru.properties</filename> <programlisting>editorCaption=Заказ</programlisting></para>
        <para>Зарегистрируйте экран в файле <filename>sales-screens.xml</filename> модуля <structname>gui</structname>: </para>
        <programlisting>&lt;screen id=&quot;sales$Order.edit&quot; template=&quot;/com/haulmont/sales/gui/order/order-edit.xml&quot;/&gt;</programlisting>
        <para>Пересоберите проект </para>
        <para><prompt>gradle restart</prompt></para>
        <para>и зайдите в систему, выбрав Русский язык в окне логина. Откройте пункт меню <guimenu>Продажи</guimenu> −&gt; <guimenu>Заказы</guimenu> и нажмите кнопку <guibutton>Создать</guibutton>.</para>
        <figure>
          <title>Экран редактирования Заказа</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/qs_order_edit.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>В получившемся экране выбор покупателя производится через экран списка покупателей, открывающийся при нажатии на кнопку <guibutton>...</guibutton></para>
        <para>Во многих случаях удобнее выбирать связанную сущность из выпадающего списка. Чтобы реализовать такую возможность, добавьте в элемент <sgmltag>dsContext</sgmltag> источник данных для выпадающего списка: <programlisting>&lt;collectionDatasource id=&quot;customersDs&quot;
                      class=&quot;com.sample.sales.entity.Customer&quot;
                      view=&quot;_minimal&quot;&gt;
    &lt;query&gt;select c from sales$Customer c order by c.name&lt;/query&gt;
&lt;/collectionDatasource&gt;</programlisting></para>
        <para>и установите атрибут <sgmltag>optionsDatasource</sgmltag> поля <literal>customer</literal>: <programlisting>&lt;field id=&quot;customer&quot; optionsDatasource=&quot;customersDs&quot;/&gt;</programlisting></para>
        <para>После перезапуска приложения экран примет следующий вид:</para>
        <figure>
          <title>Экран редактирования Заказа с выбором Покупателя из выпадающего списка</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/qs_order_edit_2.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section>
        <title>Экран редактирования Покупателя со списком Заказов </title>
        <para>Вернемся к задаче отображения списка Заказов в окне редактирования Покупателя.</para>
        <para>Откройте файл <filename>customer-edit.xml</filename> и добавьте в элемент <sgmltag>dsContext</sgmltag> следующий источник данных: <programlisting>&lt;collectionDatasource id=&quot;ordersDs&quot;
                      class=&quot;com.sample.sales.entity.Order&quot;
                      view=&quot;_local&quot;&gt;
    &lt;query&gt;
        select o from sales$Order o
        where o.customer.id = :ds$customerDs
        order by o.date
    &lt;/query&gt;
&lt;/collectionDatasource&gt;</programlisting></para>
        <para>Здесь запрос содержит условие отбора Заказов с параметром <literal>ds$customerDs</literal>. Значением параметра с именем вида <literal>ds${datasource_name}</literal> будет идентификатор сущности, установленной в данный момент в источнике данных <literal>datasource_name</literal>, в данном случае − идентификатор редактируемого Покупателя.</para>
        <para>Добавьте в <sgmltag>layout</sgmltag> между элементами <sgmltag>fieldGroup</sgmltag> и <sgmltag>iframe</sgmltag> следующее: <programlisting>&lt;label value=&quot;msg://orders&quot;/&gt;
&lt;table id=&quot;ordersTable&quot; width=&quot;100%&quot;&gt;
    &lt;columns&gt;
        &lt;column id=&quot;date&quot;/&gt;
        &lt;column id=&quot;amount&quot;/&gt;
    &lt;/columns&gt;
    &lt;rows datasource=&quot;ordersDs&quot;/&gt;
&lt;/table&gt;</programlisting></para>
        <para>Здесь <sgmltag>label</sgmltag> − надпись со значением из пакета локализованных сообщений, <sgmltag>table</sgmltag> − таблица, связанная с новым источником данных <literal>ordersDs</literal>.</para>
        <para>Для того чтобы таблица заняла все доступное пространство экрана, укажите ее идентификатор в атрибуте <sgmltag>expand</sgmltag> элемента <sgmltag>layout</sgmltag>.</para>
        <para>Добавьте в файлы <filename>messages.properties</filename> и <filename>messages_ru.properties</filename> пакета <code>com.sample.sales.gui.order</code>  локализацию надписи: </para>
        <para><filename>messages.properties</filename> <programlisting>orders=Orders</programlisting></para>
        <para><filename>messages_ru.properties</filename> <programlisting>orders=Заказы</programlisting></para>
        <para>Пересоберите проект </para>
        <para><prompt>gradle restart</prompt></para>
        <para>Зайдите в систему и откройте на редактирование Покупателя, для которого имеются Заказы.</para>
        <figure>
          <title>Экран редактирования Покупателя со списком Заказов</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/qs_customer_edit_2.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
    </section>
  </section>
</chapter>
