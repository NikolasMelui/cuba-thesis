<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<!-- This document was created with Syntext Serna Free. --><chapter id="chapter_development" lang="ru">
  <title>Разработка приложений</title>
  <section id="project_file_structure_section">
    <title>Файловая структура проекта</title>
    <para>Рассмотрим структуру классов и других файлов в проекте.</para>
    <para>В корне проекта расположены скрипты сборки <filename>build.gradle</filename>, <filename>settings.gradle</filename> и проектные файлы <application>IntelliJ IDEA</application>.</para>
    <para id="text_module_id">В каталоге <filename>modules</filename> расположены подкаталоги <firstterm id="text_modules">модулей</firstterm> проекта − <structname>global</structname>, <structname>core</structname>, <structname>gui</structname>, <structname>web</structname>. Модуль – это элемент проекта, в котором хранится программный код.</para>
    <itemizedlist>
      <listitem>
        <para><structname>global</structname></para>
      </listitem>
      <listitem>
        <para><structname>core</structname></para>
      </listitem>
      <listitem>
        <para><structname>gui</structname></para>
      </listitem>
      <listitem>
        <para><structname>client</structname></para>
      </listitem>
      <listitem>
        <para><structname>web</structname></para>
      </listitem>
      <listitem>
        <para><structname>web-portal</structname></para>
      </listitem>
      <listitem>
        <para><structname>desktop</structname></para>
      </listitem>
    </itemizedlist>
    <para>Модуль <structname>global</structname> определяет компоненты, доступные как среднему слою (Middleware), так и клиентскому коду.</para>
    <itemizedlist>
      <listitem>
        <para>В пакете <package>com.haulmont.shop.core.app</package> создаются интерфейсы <link linkend="services_section">сервисов</link> среднего слоя (Middleware). </para>
      </listitem>
      <listitem>
        <para>В пакете <package>com.haulmont.shop.core.entity</package> создаются классы <glossterm linkend="entity_glossentry">сущностей</glossterm> и <glossterm linkend="message_pack_glossentry">файлы локализованных сообщений</glossterm>  <filename>messages.properties</filename> для задания названий сущностей и их атрибутов.</para>
      </listitem>
      <listitem>
        <para>В файле <filename>shop-persistence.xml</filename>  регистрируются новые классы сущностей.</para>
      </listitem>
      <listitem>
        <para>В файле <filename>shop-metadata.xml</filename>  может быть задано <link linkend="extension_section">замещение</link> стандартных сущностей новыми.</para>
      </listitem>
    </itemizedlist>
    <figure>
      <title>Структура каталогов и файлов проекта</title>
      <mediaobject>
        <imageobject>
          <imagedata contentwidth="55%" align="center" fileref="img/ch2_structure.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Модуль <structname>core</structname> определяет компоненты среднего слоя (Middleware) системы.</para>
    <itemizedlist>
      <listitem>
        <para>Каталог <filename>db</filename> содержит sql-скрипты создания и <link linkend="db_update_section">изменения</link> базы данных в подкаталогах <filename>init</filename> и <filename>update</filename> соответственно.</para>
      </listitem>
      <listitem>
        <para>В пакете <package>com.haulmont.shop.core.app</package> создаются классы реализации <link linkend="services_section">сервисов (Services)</link> среднего слоя (Middleware), а также другие компоненты бизнес-логики приложения.</para>
      </listitem>
      <listitem>
        <para>Файл <filename>shop-app.properties</filename> содержит конфигурационные параметры среднего слоя:</para>
        <para><parameter>cuba.springContextConfig</parameter> − определяет набор конфигурационных файлов <link linkend="text_spring">Spring</link>-фреймворка;</para>
        <para><parameter>cuba.persistenceConfig</parameter> − определяет набор конфигурационных файлов <link linkend="text_additionally_ORM">ORM</link>;</para>
        <para><parameter>cuba.viewsConfig</parameter> − задает набор конфигурационных файлов <link linkend="views_section">представлений</link>;</para>
      </listitem>
      <listitem>
        <para>В файле <filename>shop-spring.xml</filename> при необходимости можно подменить реализацию стандартных сервисов или других управляемых фреймворком <link linkend="text_additionally_spring">Spring</link> компонентов, а также зарегистрировать создаваемые <glossterm linkend="jmx_glossentry">JMX</glossterm>-компоненты.</para>
      </listitem>
      <listitem>
        <para>Файл <filename>shop-views.xml</filename> содержит описание <link linkend="views_section">представлений</link>. Механизм представлений  обеспечивает извлечение из БД и передачу клиенту графов сущностей, ограниченных в глубину и/или по атрибутам.</para>
      </listitem>
      <listitem>
        <para>Файл <filename>web\META-INF\context.xml</filename> содержит настройки подключения к базе данных.</para>
      </listitem>
      <listitem>
        <para>Файл <filename>web\WEB-INF\web.xml</filename> − это дескриптор веб-приложения среднего слоя (Middleware). Среди прочего содержит список <glossterm linkend="app_properties_glossentry">конфигурационных файлов</glossterm> <filename>*-app.properties</filename>, используемых данным приложением.</para>
      </listitem>
    </itemizedlist>
    <para>Модуль <structname>gui</structname> определяет компоненты <link linkend="gui_framework_section">графического пользовательского интерфейса</link>. Этот модуль доступен всем типам клиентов. Модуль <structname>gui</structname> содержит универсальные экраны: классы <glossterm linkend="screen_controller_glossentry">контроллеров</glossterm>, <glossterm linkend="screen_xml_descriptor_glossentry">XML-дескрипторы</glossterm> экранов, файлы <glossterm linkend="message_pack_glossentry">локализованных сообщений</glossterm>.</para>
    <itemizedlist>
      <listitem>
        <para>В пакете <package>com.haulmont.shop.gui.ui</package> создаются экраны приложения.</para>
      </listitem>
      <listitem>
        <para>В файле <filename>shop-screens.xml</filename> регистрируются экраны приложения.</para>
      </listitem>
    </itemizedlist>
    <para>Модуль <structname>web</structname> определяет компоненты веб-клиента. Зависит от модулей <structname>gui</structname> и <structname>global</structname>. Содержит специфические экраны и/или <glossterm>компаньоны</glossterm> и файлы конфигурации.</para>
    <itemizedlist>
      <listitem>
        <para>Класс  <classname>com.haulmont.shop.App.java</classname> определяет главное окно приложения.</para>
      </listitem>
      <listitem>
        <para>Файл <filename>shop-web-app.properties</filename> содержит конфигурационные параметры веб-клиента:</para>
        <para><parameter>cuba.windowConfig</parameter> − в этом свойстве указывается набор файлов конфигурации экранов приложения;</para>
        <para><parameter>cuba.menuConfig</parameter> содержит список файлов, описывающих меню приложения;</para>
        <para><parameter>cuba.appConfig.messagesPack</parameter>  задает список имен <glossterm linkend="message_pack_glossentry">пакетов сообщений</glossterm>, формирующих <glossterm linkend="main_message_pack_glossentry">главный пакет</glossterm>, используемый главным меню и другими общими компонентами системы;</para>
      </listitem>
      <listitem>
        <para>Файл <filename>shop-web-menu.xml</filename> содержит описание пунктов главного меню приложения.</para>
      </listitem>
      <listitem>
        <para>В файле <filename>shop-web-screens.xml</filename> регистрируются экраны приложения.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Описание скриптов сборки</title>
    <para>TODO</para>
  </section>
  <section>
    <title>Описание конфигурационных файлов</title>
    <variablelist>
      <varlistentry id="text_context_xml">
        <term>context.xml</term>
        <listitem>
          <para>В данном конфигурационном файле задается <link linkend="dbms_types_section">тип используемой СУБД</link>, а также использование <classname>PersistenceManager</classname>.</para>
          <para>Пример файла <filename>context.xml</filename> для приложения Магазин:</para>
          <programlisting language="xml"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="source/context.xml" encoding="UTF-8" parse="text"/></programlisting>
        </listitem>
      </varlistentry>
      <varlistentry id="text_web_xml_core">
        <term>web.xml</term>
        <listitem>
          <para>Файл <filename>web.xml</filename> модуля <structname>core</structname> приложения Магазин:</para>
          <programlisting language="xml"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="source/web.xml" encoding="UTF-8" parse="text"/></programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>TODO</para>
  </section>
  <section>
    <title>Создание проекта</title>
    <para>TODO</para>
  </section>
  <section>
    <title>Соглашения по именованию</title>
    <para>Ниже представлены соглашения, рекомендуемые для программирования на платформе <trademark>CUBA</trademark>.</para>
    <para>При написании классов рекомендуем использовать стиль <application>IntelliJ IDEA</application> по умолчанию (это можно сделать с помощью сочетания клавиш <keycombo>
        <keycap function="control">Ctrl</keycap>
        <keycap function="alt">Alt</keycap>
        <keycap>L</keycap>
      </keycombo>). Стиль <application>IntelliJ IDEA</application> по умолчанию удовлетворяет Code Conventions for the Java Programming Language (<ulink url="http://www.oracle.com/technetwork/java/codeconv-138413.html">http://www.oracle.com/technetwork/java/codeconv-138413.html</ulink>)</para>
    <para>Максимальная длина строки − 120 символов. Максимальная длина метода − 50 строк.</para>
    <para>Правила использования прописных букв в идентификаторах:
</para>
    <informaltable frame="all" pgwide="0" align="center">
      <tgroup cols="3" colsep="1" rowsep="1" align="center">
        <colspec colname="c1"/>
        <colspec colname="c2"/>
        <colspec colname="c3"/>
        <thead wordsize="16">
          <row>
            <entry colname="Имя атрибута" role="bord">Идентификатор</entry>
            <entry colname="Тип атрибута" role="caption">Правило именования</entry>
            <entry colname="Тип атрибута" role="caption">Пример</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry namest="c1" nameend="c3" align="center" role="left">
              <emphasis role="bold">Java и Groovy классы </emphasis>
            </entry>
          </row>
          <row>
            <entry align="left">Название класса, тип перечисления, событие, класс исключения, интерфейс</entry>
            <entry align="left">UpperCamelCase </entry>
            <entry align="left"><classname>Buyer</classname>, <classname>Unit</classname>, <classname>EditRoleAction</classname>, <classname>RuntimeException</classname>, <classname>Editor</classname></entry>
          </row>
          <row>
            <entry align="left" role="left">Название класса контроллера</entry>
            <entry align="left" role="special">UpperCamelCase, контроллеры экранов со списком сущностей − <classname>&lt;ИмяКлассаСущности&gt;Browser</classname>, контроллеры экранов редактирования − <classname>&lt;ИмяКлассаСущности&gt;Editor</classname></entry>
            <entry align="left" role="right">
              <classname>BuyerBrowser</classname>
            </entry>
          </row>
          <row>
            <entry align="left">Статическое поле только для чтения</entry>
            <entry align="left">UPPERCASE</entry>
            <entry align="left">
              <classname>ENTITY_SPECIAL_KEY</classname>
            </entry>
          </row>
          <row>
            <entry align="left" role="left">Метод, переменная</entry>
            <entry align="left" role="special">lowerCamelCase</entry>
            <entry align="left" role="right"><classname>setItem</classname>, <classname>discountsTable</classname></entry>
          </row>
          <row>
            <entry namest="c1" nameend="c3" align="center">
              <emphasis role="bold">XML-дескрипторы</emphasis>
            </entry>
          </row>
          <row>
            <entry align="left" role="left">Идентификатор компонента, имена параметров в запросах</entry>
            <entry align="left" role="special">lowerCamelCase, только буквы и цифры</entry>
            <entry align="left" role="right"><classname>attributesTable</classname>, <classname>component$relevantTo</classname></entry>
          </row>
          <row>
            <entry align="left">Идентификатор источника данных</entry>
            <entry align="left">lowerCamelCase, только буквы и цифры, оканчивается на <classname>Ds</classname></entry>
            <entry align="left">
              <classname>attributesDs</classname>
            </entry>
          </row>
          <row>
            <entry align="left">Имена параметров в запросах</entry>
            <entry align="left">lowerCamelCase, только буквы и цифры</entry>
            <entry align="left">
              <classname>component$relevantTo</classname>
            </entry>
          </row>
          <row>
            <entry namest="c1" nameend="c3" align="center" role="left">
              <emphasis role="bold">Объекты базы данных</emphasis>
            </entry>
          </row>
          <row>
            <entry align="left">Зарезервированные слова</entry>
            <entry align="left">lowercase</entry>
            <entry align="left">
              <classname>create table</classname>
            </entry>
          </row>
          <row>
            <entry align="left" role="left">Идентификаторы</entry>
            <entry align="left" role="special">UPPERCASE. Слова в названии разделяются подчеркиванием. В именах таблиц используется либо единственное число, либо множественное, но не оба сразу. Рекомендуем использовать единственное число.</entry>
            <entry align="left" role="right">
              <classname>SYS_FTS_QUEUE</classname>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>
  <section>
    <title>Отладка и тестирование</title>
    <para>TODO</para>
  </section>
  <section>
    <title>Интеграция со сторонними приложениями</title>
    <para>TODO</para>
  </section>
  <section>
    <title>Практические руководства</title>
    <section>
      <title>Правила создания сервисов</title>
      <para>Имена интерфейсов сервисов должны заканчиваться на <classname>...Service</classname>, имена реализаций на <classname>...ServiceBean</classname>.</para>
      <para>При создании сервиса необходимо выполнить следующее:</para>
      <procedure>
        <step>
          <para>Создать интерфейс в модуле <structname>global</structname> в пакете <package>app</package> и задать в нем имя сервиса. Имя должно начинаться с имени проекта, затем через символ нижнего подчеркивания должно идти имя сервиса. Например:</para>
          <programlisting language="java">String NAME = &quot;cuba_DataService&quot;;</programlisting>
        </step>
        <step>
          <para>Создать класс сервиса и добавить ему аннотацию <literal>@Service</literal> с именем, заданным в интерфейсе</para>
          <programlisting>@Service(DataService.NAME)</programlisting>
        </step>
        <step>
          <para>При необходимости обращения к базе данных создавать и завершать <link linkend="transactions_section">транзакцию</link></para>
          <programlisting>@Inject
private Persistence persistence;
...
Transaction tx = persistence.createTransaction();
try {
    ...
    tx.commit();
} finally {
    tx.end();
}</programlisting>
        </step>
      </procedure>
      <para>Каждый вызов сервиса перехватывается с помощью <link linkend="text_additionally_spring">Spring AOP</link>  и обрамляется вызовом <acronym>ServiceInterceptor.aroundInvoke()</acronym>.</para>
      <warning>
        <para>Сервисы не должны вызывать методы других сервисов ни напрямую, ни через другие объекты, так как это может нарушить логику работы с транзакциями и другие механизмы. В случае вызова сервиса сервисом в журнале приложения появятся соответствующие сообщения об ошибке.</para>
      </warning>
      <tip>
        <title>Совет</title>
        <para>Если некую бизнес-логику требуется вызывать из разных сервисов либо других компонентов Middleware, ее необходимо инкапсулировать внутри соответствующего <link linkend="managed_beans_section">Managed Bean</link> либо <glossterm linkend="pojo_glossentry">POJO</glossterm>.</para>
      </tip>
      <para><emphasis role="bold">Использование на клиенте</emphasis></para>
      <para>Для того чтобы вызывать сервис с клиента, для него должен быть создан соответствующий <firstterm>объект-заместитель</firstterm> (прокси-объект). Делается это путем объявления имени и интерфейса сервиса в параметрах объекта <parameter>WebRemoteProxyBeanCreator</parameter> для веб-клиента или <parameter>RemoteProxyBeanCreator</parameter> для  десктоп-клиента.</para>
      <para>Например, чтобы в приложении <application>RefApp</application> вызвать с веб-клиента сервис <classname>refapp_MyService</classname>, необходимо добавить в файл <filename>refapp-web-spring.xml</filename> следующее:</para>
      <programlisting language="xml">&lt;bean id=&quot;refapp_proxyCreator&quot; class=&quot;com.haulmont.cuba.web.sys.remoting.WebRemoteProxyBeanCreator&quot;&gt;
    &lt;property name=&quot;clusterInvocationSupport&quot; ref=&quot;cuba_clusterInvocationSupport&quot;/&gt;
    &lt;property name=&quot;remoteServices&quot;&gt;
        &lt;map&gt;
            &lt;entry key=&quot;refapp_MyService&quot; value=&quot;com.haulmont.refapp.core.app.MyService&quot;/&gt;
        &lt;/map&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>
      <para>Все импортируемые сервисы должны быть объявлены в одном <firstterm>словаре</firstterm> (map) бина <classname>refapp_proxyCreator</classname>.</para>
      <para>Получить ссылку на сервис с клиента можно двумя способами:</para>
      <itemizedlist>
        <listitem>
          <para><classname>ServiceLocator</classname> </para>
          <programlisting>BookingService service = ServiceLocator.lookup(BookingService.NAME);</programlisting>
        </listitem>
        <listitem>
          <para>Для <glossterm linkend="screen_controller_glossentry">контроллеров</glossterm> экранов предпочтительный способ − <glossterm linkend="dependency_injection_glossentry">внедрение зависимости</glossterm>.</para>
        </listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Правила создания управляемых бинов</title>
      <itemizedlist>
        <listitem>
          <para>Создать интерфейс бина в пакете <package>app</package> и задать в нем кроме методов поле с именем бина. Имя бина должно иметь префикс с именем проекта. Например:</para>
          <para><programlisting>public interface TaskWorker {
    String NAME = &quot;taskman_TaskWorker&quot;;
    ...</programlisting></para>
        </listitem>
        <listitem>
          <para>Создать класс реализации в пакете <package>app</package> и аннотировать его, указав имя бина:</para>
          <para><programlisting>@ManagedBean(TaskWorker.NAME)
public class TaskWorkerBean implements TaskWorker {
...</programlisting></para>
        </listitem>
      </itemizedlist>
      <para>Данные правила дают возможность в дальнейшем получать ссылки на бин, указывая константу в качестве имени:</para>
      <programlisting>LoginService ls = AppContext.getBean(LoginService.NAME);</programlisting>
      <para>Ссылку на бин в другом управляемом бине (а также  в <link linkend="services_section">сервисе</link> или <link linkend="mbeans_section">МБине</link>) можно получить более простым и естественным способом, объявив поле соответствующего типа и добавив ему аннотацию<literal> @Inject</literal>:</para>
      <programlisting>@Inject
private TaskWorker taskWorker;</programlisting>
      <para>В этом случае контейнер автоматически найдет подходящую реализацию и установит ссылку на объект во время разворачивания приложения в памяти.</para>
      <para>Довольно часто программный компонент, реализующий бизнес-логику, должен иметь состояние (например, кэш или конфигурационные данные), и предоставлять интерфейс администратору системы для просмотра и управления этими данными. В этом случае рекомендуется добавить управляемому бину <glossterm linkend="jmx_glossentry">JMX</glossterm>-интерфейс и превратить его тем самым в <link linkend="mbeans_section">МБин</link>.</para>
    </section>
    <section>
      <title>Правила создания Мбинов</title>
      <para>Если JMX-методы МБина работают с данными, то ему потребуется пользовательская сессия с правами на доступ. В этом случае рекомендуется наследовать МБин от базового класса <classname>ManagementBean</classname>, который содержит удобные методы входа в систему/выхода из системы (login/logout).</para>
      <para><emphasis role="bold">Правила создания</emphasis></para>
      <itemizedlist>
        <listitem>
          <para>Создать интерфейс с именем, заканчивающимся на <classname>*MBean</classname>, например, <classname>SampleMBean</classname> в пакете <package>app</package></para>
        </listitem>
        <listitem>
          <para>Если нужно обращение к МБину из кода сервера (а не только из <glossterm linkend="jmx_glossentry">JMX</glossterm>-консоли), создать интерфейс <interfacename>SampleAPI</interfacename>. Создать в интерфейсе поле с именем бина, в качестве префикса использовать имя проекта:</para>
          <programlisting>public interface SampleAPI {
    String NAME = &quot;myproject_Sample&quot;;
    ...</programlisting>
        </listitem>
        <listitem>
          <para>Создать класс реализации с именем, соответствующим интерфейсу, в нашем случае <classname>Sample</classname> и аннотировать его как <literal>@ManagedBean(SampleAPI.NAME)</literal></para>
        </listitem>
        <listitem>
          <para>Экспортировать <interfacename>*MBean</interfacename> интерфейс в JMX в файле <filename>myproject-spring.xml</filename>, например:</para>
          <programlisting>&lt;bean id=&quot;myproject_MBeanExporter&quot; class=&quot;org.springframework.jmx.export.MBeanExporter&quot; lazy-init=&quot;false&quot;&gt;
        &lt;property name=&quot;beans&quot;&gt;
            &lt;map&gt;
                &lt;entry key=&quot;${cuba.webContextName}:service=Sample&quot; value-ref=&quot;myproject_Sample&quot;/&gt;
            &lt;/map&gt;
        &lt;/property&gt;
        &lt;property name=&quot;assembler&quot;&gt;
            &lt;bean class=&quot;org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler&quot;&gt;
                &lt;property name=&quot;interfaceMappings&quot;&gt;
                    &lt;map&gt;
                        &lt;entry key=&quot;myproject_Sample&quot; value=&quot;com.haulmont.myproject.core.app.SampleMBean&quot;/&gt;
                    &lt;/map&gt;
                &lt;/property&gt;
            &lt;/bean&gt;
        &lt;/property&gt;
    &lt;/bean&gt;</programlisting>
        </listitem>
      </itemizedlist>
      <para>Один <link linkend="text_additionally_spring">Spring</link>-объект <classname>MBeanExporter</classname> может экспортировать несколько МБинов. 
Для удобства работы администратора методы JMX-интерфейса должны возвращать строку. В случае успешного выполнения это может быть полезная информация, либо просто строка <computeroutput>Done</computeroutput>. В случае возникновения исключения нужно его записать в журнал и вернуть stacktrace:</para>
      <programlisting>public String jmxMethod1() {
    try {
        return &quot;Done&quot;;
    } catch (Exception e) {
        log.error(&quot;Error executing jmxMethod1&quot;, e);
        return ExceptionUtils.getStackTrace(e);
    } 
}</programlisting>
      <para><emphasis role="bold">Security</emphasis></para>
      <para>Как правило, для выполнения функций МБинов требуется аутентификация в <trademark>CUBA</trademark>-security, а <glossterm linkend="jmx_glossentry">JMX</glossterm>-интерфейс  ее обеспечить не может. Простой механизм входа в систему/выхода из системы (login/logout) содержится в классе <classname>com.haulmont.cuba.core.app.ManagementBean</classname>, поэтому желательно наследовать свои классы МБинов, работающих с данными, от этого класса. Пример использования:</para>
      <programlisting>public String jmxMethod2() {
    try {
loginOnce(); // defined in ManagementBean
...
return &quot;Done&quot;;
    } catch (Exception e) {
        log.error(&quot;Error executing jmxMethod2&quot;, e);
return ExceptionUtils.getStackTrace(e);
    } 
}</programlisting>
      <para>Методы <methodname>login()</methodname> и <methodname>loginOnce()</methodname>, определенные в классе <classname>ManagementBean</classname>, осуществляют вход в систему, используя имя и пароль, заданные в <link>файле свойств</link> в параметрах  <parameter>cuba.jmxUserLogin</parameter> и <parameter>cuba.jmxUserPassword</parameter> соответственно. Пароль должен быть захеширован и указан с префиксом <code>md5:</code>. Простейший способ получить пароль пользователя в <code>md5</code> − скопировать значение из поля <database>SEC_USER.PASSWORD</database> базы данных.</para>
      <para><emphasis role="bold">Работа с JMX-интерфейсом</emphasis></para>
      <para>Обращаться к МБинам можно с помощью утилиты <application>jconsole</application>, входящей в состав <application>JDK</application>, либо с помощью программы <application>VisualVM</application>.</para>
      <para>Для того чтобы увидеть свои МБины, сервер <application>Tomcat</application> должен быть запущен с опциями удаленного подключения к <glossterm linkend="jmx_glossentry">JMX</glossterm>. В простейшем случае, без аутентификации, параметры запуска <application>JVM</application> должны содержать следующие опции:</para>
      <programlisting>set CATALINA_OPTS=-Dcom.sun.management.jmxremote
-Dcom.sun.management.jmxremote.port=7777
-Dcom.sun.management.jmxremote.ssl=false
-Dcom.sun.management.jmxremote.authenticate=false</programlisting>
    </section>
    <section>
      <title>Управление транзакциями</title>
      <para>Используется интерфейс <classname>com.haulmont.cuba.core.Transaction</classname>, получаемый из Locator&apos;a




</para>
      <itemizedlist>
        <listitem>
          <para><classname>Locator.createTransaction()</classname> – старт транзакции</para>
        </listitem>
        <listitem>
          <para><classname>Transaction.commit()</classname> – коммит, <classname>commitRetaining() </classname>– коммит и старт новой</para>
        </listitem>
        <listitem>
          <para><classname>Transaction.end()</classname> – выполняет rollback, если ранее не был вызван коммит</para>
        </listitem>
        <listitem>
          <para><classname>Locator.isInTransaction()</classname> – есть ли в данный момент транзакция</para>
        </listitem>
        <listitem>
          <para>Обязательно  вызывать <classname>Transaction.end()</classname> в блоке finally, в противном случае возможно зависание открытых транзакций в БД, что недопустимо</para>
          <programlisting>Transaction tx = Locator.createTransaction();
try {
    …
    tx.commit();
} finally {
    tx.end();
}</programlisting>
        </listitem>
      </itemizedlist>
      <para><emphasis role="bold">Особенности применения</emphasis></para>
      <itemizedlist>
        <listitem>
          <para><classname>Locator.createTransaction()</classname> всегда создает новую транзакцию. Если в этот момент уже есть открытая транзакция, она приостанавливается (REQUIRES_NEW).</para>
        </listitem>
        <listitem>
          <para><classname>Locator.getTransaction()</classname> создает новую транзакцию, только если в данный момент нет уже открытой транзакции (REQUIRES). </para>
        </listitem>
        <listitem>
          <para>Варианты использования см. в тесте <classname>com.haulmont.cuba.core.TransactionTest</classname></para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
</chapter>
